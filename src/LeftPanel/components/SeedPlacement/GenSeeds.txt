// import { ConnectWithoutContact } from "@mui/icons-material";
import {evaluate_cmap} from '../../../js-colormaps.js'

function find_cell_id(seed, lower, intervals){
    const x_index = Math.floor((seed[0] - lower[0]) / intervals[0]);
    const y_index = Math.floor((seed[1] - lower[1]) / intervals[1]);
    const z_index = Math.floor((seed[2] - lower[2]) / intervals[2]);
    const index = [x_index, y_index, z_index];
    // console.log("debug", seed, [x_index, y_index, z_index]);
    return index;
}

function trilinear_interpolation(seed, c000, c001, c010, c011, c100, c101, c110, c111, lower, upper){
    const xd = (seed[0] - lower[0]) / (upper[0] - lower[0]);
    const yd = (seed[1] - lower[1]) / (upper[1] - lower[1]);
    const zd = (seed[2] - lower[2]) / (upper[2] - lower[2]);
    // console.log(upper[0] - lower[0], upper[1] - lower[1], upper[2] - lower[2]);
    // console.log(index_min, index_max);
    // console.log(xd, yd, zd);
    const c00 = c000 * (1 - xd) + c100 * xd;
    const c01 = c001 * (1 - xd) + c101 * xd;
    const c10 = c010 * (1 - xd) + c110 * xd;
    const c11 = c011 * (1 - xd) + c111 * xd;
    const c0 = c00 * (1 - yd) + c10 * yd;
    const c1 = c01 * (1 - yd) + c11 * yd;
    const c = c0 * (1 - zd) + c1 * zd;
    return c;
}

function ColorToHex(color) {
    var hexadecimal = color.toString(16);
    return hexadecimal.length === 1 ? "0" + hexadecimal : hexadecimal;
}
  
function ConvertRGBtoHex(red, green, blue) {
    return "#" + ColorToHex(red) + ColorToHex(green) + ColorToHex(blue);
}


function GenSeeds(store)
{
    // store.renderStore.reset_trajs();
    let upper = [];
    let lower = [];
    let start = store.renderStore.seeds.length;
    let add_new_seeds = 0;
    let offset = 0;

    if(store.pipeline_selected !== -1 || store.pipeline_selected === 0){
        // there is not a selected pipeline or select the global domain === place seeds in the global domain 
        const boundings = store.modelStore.dataBounds;
        upper = [boundings[3] - offset, boundings[4] - offset, boundings[5] - offset];
        lower = [boundings[0] + offset, boundings[1] + offset, boundings[2] + offset];
    }else{
        // there is a selected box or plane 
        const pipeline_name = store.pipeline_name[store.pipeline_selected];
        if(pipeline_name === "Seed Box " + (store.pipeline_selected - 1).toString()){
            const pos = store.pipeline_box_pos[store.pipeline_selected];
            const dims = store.pipeline_box_dims[store.pipeline_selected];
            upper = [pos[0] + dims[0] / 2, pos[1] + dims[1] / 2, pos[2] + dims[2] / 2 ];
            lower = [pos[0] - dims[0] / 2, pos[1] - dims[1] / 2, pos[2] - dims[2] / 2 ];
        }
        //TODO: If pipeline is plane 
    }

    if (store.placeSeedsStore.seeding_strategy === 'random'){
        const num_seeds = store.placeSeedsStore.num_random_seeds;
        add_new_seeds = num_seeds;
        // console.log("seeding area", upper, lower)
        // console.log(num_seeds)
        for(let s = 0; s < num_seeds; ++s){
            const x = Math.random() * (upper[0] - lower[0]) +  lower[0];
            const y = Math.random() * (upper[1] - lower[1]) +  lower[1];
            const z = Math.random() * (upper[2] - lower[2]) +  lower[2]
            store.renderStore.add_seeds([x, y, z]);
        }
    }
    if(store.placeSeedsStore.seeding_strategy === 'uniform'){
        const seed_dims = store.placeSeedsStore.uniform_seeds_dims;
        add_new_seeds = store.placeSeedsStore.num_uniform_seeds;
        const x_interval = (upper[0] - lower[0]) / (seed_dims[0] - 1);
        const y_interval = (upper[1] - lower[1]) / (seed_dims[1] - 1);
        const z_interval = (upper[2] - lower[2]) / (seed_dims[1] - 1);
        for (let k = 0; k < seed_dims[2]; k++){
            for(let j = 0; j < seed_dims[1]; j++)
            {
                for(let i = 0; i < seed_dims[0]; i++)
                {
                    // const index = seed_dims[0] * seed_dims[1] * k + seed_dims[0] * j + i;
                    const x = i * x_interval + lower[0];
                    const y = j * y_interval + lower[1];
                    const z = k * z_interval + lower[2];
                    store.renderStore.add_seeds([x, y, z]);
                }
            }
        }
    }
    if(store.placeSeedsStore.seeding_strategy === 'manually'){
        // console.log("insert manually")
        add_new_seeds = 1;
        const pos = store.placeSeedsStore.manual_seed_pos;
        store.renderStore.add_seeds(pos);
    }
    if (store.placeSeedsStore.seeding_strategy ==='upload'){
        // console.log("uploading seed file")
        add_new_seeds = store.placeSeedsStore.uploaded_seeds.length / 3;
        for(let i = 0; i < add_new_seeds; i++){
            const x = store.placeSeedsStore.uploaded_seeds[3 * i];
            const y = store.placeSeedsStore.uploaded_seeds[3 * i + 1];
            const z = store.placeSeedsStore.uploaded_seeds[3 * i + 2];
            // console.log(x, y, z)
            store.renderStore.add_seeds([x, y, z]);
        }
    }
    console.log("seeds", store.renderStore.seeds)
    // Calculate the colors 
    // if(store.controlStore.color_by_constant || (store.controlStore.color_by_attribute && store.attribute_data === null) ){
    //     for(let i = 0; i < add_new_seeds; i++){
    //         store.renderStore.addColorToArray(store.renderStore.color);
    //     }
    // }
    // // console.log("color", store.renderStore.color_array)
    // if(store.controlStore.color_by_attribute && store.attribute_data !== null){
    //     const boundings = store.dataBounds;
    //     const dims = store.attribute_dims;
    //     const lower = [boundings[0], boundings[1], boundings[2]];
    //     const x_interval = (boundings[3] - boundings[0]) / (dims[0] - 1)
    //     const y_interval = (boundings[4] - boundings[1]) / (dims[1] - 1)
    //     const z_interval = (boundings[5] - boundings[2]) / (dims[2] - 1)
    //     const intervals = [x_interval, y_interval, z_interval];
    //     // color by attribute value
    //     Promise.all(Array.from(store.renderStore.seeds.map(async (seed, i) =>{
    //         // console.log("start_seeds", start, i)
    //         if (i >= start){
    //             const index = find_cell_id(seed, lower, intervals, store.attribute_data);
    //             const index_0 = [index[0], index[1], index[2]]
    //             const index_1 = [index[0] + 1, index[1], index[2]]
    //             const index_2 = [index[0] + 1, index[1] + 1, index[2]]
    //             const index_3 = [index[0], index[1] + 1, index[2]]
    //             const index_4 = [index[0], index[1], index[2]+1]
    //             const index_5 = [index[0] + 1, index[1], index[2] + 1]
    //             const index_6 = [index[0] + 1, index[1] + 1, index[2] + 1]
            //     const index_7 = [index[0], index[1] + 1, index[2] + 1]
            //     // console.log("index", index_0, index_1, index_2, index_3, index_4, index_5, index_6, index_7)
            //     const i_0 = dims[0] * dims[1] * index_0[2] + dims[0] * index_0[1] + index_0[0]
            //     const i_1 = dims[0] * dims[1] * index_1[2] + dims[0] * index_1[1] + index_1[0]
            //     const i_2 = dims[0] * dims[1] * index_2[2] + dims[0] * index_2[1] + index_2[0]
            //     const i_3 = dims[0] * dims[1] * index_3[2] + dims[0] * index_3[1] + index_3[0]
            //     const i_4 = dims[0] * dims[1] * index_4[2] + dims[0] * index_4[1] + index_4[0]
            //     const i_5 = dims[0] * dims[1] * index_5[2] + dims[0] * index_5[1] + index_5[0]
            //     const i_6 = dims[0] * dims[1] * index_6[2] + dims[0] * index_6[1] + index_6[0] 
            //     const i_7 = dims[0] * dims[1] * index_7[2] + dims[0] * index_7[1] + index_7[0]
            //     // console.log("i", i_0, i_1, i_2, i_3, i_4, i_5, i_6, i_7)
            //     const c000 = store.attribute_data.getValue(i_0)
            //     const c001 = store.attribute_data.getValue(i_3)
            //     const c010 = store.attribute_data.getValue(i_4)
            //     const c011 = store.attribute_data.getValue(i_7)
            //     const c100 = store.attribute_data.getValue(i_1)
            //     const c101 = store.attribute_data.getValue(i_2)
            //     const c110 = store.attribute_data.getValue(i_5)
            //     const c111 = store.attribute_data.getValue(i_6)
            //     // console.log("value", c000, c001, c010, c011)
            //     const grid_lower = [intervals[0] * index_0[0], intervals[1] * index_0[1], intervals[2] * index_0[2]]
            //     const grid_upper = [intervals[0] * index_6[0], intervals[1] * index_6[1], intervals[2] * index_6[2]]
            //     return trilinear_interpolation(seed, c000, c001, c010, c011, c100, c101, c110, c111, grid_lower, grid_upper);
            // }
            
        // }))).then(values =>{
        //     values.forEach(value =>{
        //         console.log("interpolation value", value);
        //         console.log(store.attribute_range[0], store.attribute_range[1])
        //         let normalized_value = (value - store.attribute_range[0]) / (store.attribute_range[1] - store.attribute_range[0]);
        //         console.log("interpolation results", normalized_value);
        //         const color = evaluate_cmap(normalized_value, 'viridis', false);
        //         store.renderStore.addColorToArray(ConvertRGBtoHex(color[0], color[1], color[2]));
        //     })
        // });
    // }
}
export default GenSeeds





// if(store.controlStore.select_plane === true){
//     // check  which axis is on 
//     if (store.controlStore.plane_checked_x){
//         const pos = store.renderStore.seeds_plane_pos_x;
//         const dims = store.renderStore.seeds_plane_dims_x;
//         // console.log("pos", pos)
//         // console.log("dims", dims)
//         upper = [pos[0], pos[1] + dims[0] /2 - offset, pos[2] + dims[1] / 2 - offset];
//         lower = [pos[0], pos[1] - dims[0] /2 + offset, pos[2] - dims[1] / 2 + offset];
//     }
//     if (store.controlStore.plane_checked_y){
//         const pos = store.renderStore.seeds_plane_pos_y;
//         const dims = store.renderStore.seeds_plane_dims_y;
//         upper = [pos[0] + dims[0] /2 - offset, pos[1], pos[2] + dims[1]/2 - offset];
//         lower = [pos[0] - dims[0] /2 + offset, pos[1], pos[2] - dims[1]/2 + offset];
//     }
//     if (store.controlStore.plane_checked_z){
//         const pos = store.renderStore.seeds_plane_pos_z;
//         const dims = store.renderStore.seeds_plane_dims_z;
//         upper = [pos[0] + dims[0] /2 - offset, pos[1] + dims[1]/2 - offset, pos[2]];
//         lower = [pos[0] - dims[0] /2 + offset, pos[1] - dims[1]/2 + offset, pos[2]];
//     }
// }